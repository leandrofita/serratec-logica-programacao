// # Serratec
//  * L√≥gica de Programa√ß√£o - Prof. Moises do Amaral Baddini
//  * Atividade: Elicita√ß√£o de Requisitos
//  * Squad: Rock n' Beer
//  * Autor (Descri√ß√£o): Nathan Guimar√£es
//  * T√≠tulo: BVV - Bolsa de Valores Virtual üìà
//  * Arquivo: BVV.js
//  * Elabora√ß√£o do Requsito: 20/08/2021

// ## Descri√ß√£o:
// A BVV (Bolsa de Valores Virtual) √© um sistema de negocia√ß√£o (compra e venda) de a√ß√µes e controle de carteira do usu√°rio.
// Na entrevista com o cliente, ficou decidido que a primeira vers√£o do sistema dever√° conter as seguintes op√ß√µes e funcionalidades:

// ‚Ä¢ Informa√ß√µes do Usu√°rio: 
//     Nome do usu√°rio;
//     Carteira de a√ß√µes do usu√°rio (c√≥digo, pre√ßo e quantidade de cada a√ß√£o);
    
// ‚Ä¢ Balc√£o de Neg√≥cios:
//     Comprar a√ß√£o;
//     Vender a√ß√£o;
//     Lista das a√ß√µes dispon√≠veis para negocia√ß√£o (c√≥digo, pre√ßo e quantidade de cada a√ß√£o dispon√≠vel para negocia√ß√£o);

// ## Orienta√ß√µes:
// Os c√≥digos de cada a√ß√£o s√£o representados por tr√™s letras mai√∫sculas seguidas de um n√∫mero (VALE3, PETR4, ITUB4, ABEV3, MGLU3 etc.);

class Usuario {

    constructor(nome, acoes){
        this.nome = nome;

        this.acoes = [];
        if (acoes != undefined) {
            this.acao.push(acoes);
        }
    }
}

class Acao {

    constructor(cod, qtd, cotacao){
        this.cod = cod;
        this.qtd = qtd;
        this.cotacao = cotacao;
    }
}

const PROMPT = require("prompt-sync")();

const MENSAGENS = {
    boasVindas: "=== Seja bem-vindo a BVV - Bolsa de Valores Virtual ===",
    escolher : "Escolha uma das op√ß√µes abaixo:",
    cadUsuario: "Ol√°! Por favor, insira seu nome completo.",
    gerenciamentoCarteira: "=== Visualiza√ß√£o de carteira. ===",
    neociacaoAcao: "=== Negocia√ß√£o de A√ß√µes. ===",
    comprarAcao: "=== Comprar A√ß√µes. ===",
    comprarEfetivada: "=== Compra efetivada com Sucesso! ===",
    vendaEfetivada: "=== Venda efetivada com Sucesso! ===",
    venderAcao: "=== Vender A√ß√µes. ===",
    limiteSuperior = "=== Quantidade superior ao limite! ===",
};

const OPCOESMSG = {
    cadastrar: "Cadastrar-se.",
    carteira: "Visualizar carteira de a√ß√µes.",
    retornarInicio: "Retornar ao menu principal.",
    qualquerTecla: "Pressione qualquer tecla para continuar!",
    negociacao: "Negociar a√ß√µes.",
    comprar : "Comprar a√ß√µes",
    vender : "Vender a√ß√µes",
};

const CODACOES = {
    VALE3: "VALE3",
    PETR4: "PETR4",
    ITUB4: "ITUB4",
    ABEV3: "ABEV3",
    MGLU3: "MGLU3",
}

var acoesDisponiveis = [new Acao(CODACOES.VALE3, randomico(1, 100, false), randomico(1, 100, true)),
                        new Acao(CODACOES.PETR4, randomico(1, 100, false), randomico(1, 100, true)),
                        new Acao(CODACOES.ITUB4, randomico(1, 100, false), randomico(1, 100, true)),
                        new Acao(CODACOES.ABEV3, randomico(1, 100, false), randomico(1, 100, true)),
                        new Acao(CODACOES.MGLU3, randomico(1, 100, false), randomico(1, 100, true))]



function lerEntrada(msg, breakLine, clear){
    exibirMensagem(msg, breakLine, clear);
    return PROMPT("> ");
}

function exibirMensagem(mensagem, space, clear){

    if (clear) {
        console.clear();
    }

    console.log(mensagem);

    if (space) {
        console.log();
    }
}

// Permitir entrada apenas de n√∫meros.
function somenteNumero(numero, zeroIncluso, limiteOpcoes){
    if (zeroIncluso)
        return (numero === "" || isNaN(numero) || numero == undefined) ? false : true;
    else
        return (numero === "" || numero <= 0 || numero > limiteOpcoes || isNaN(numero) || numero == undefined) ? false : true;
}

function cadastrarUsuario(){
    
    console.clear();
    var nome = lerEntrada(MENSAGENS.cadUsuario, true, false);
    
    if (nome == "") {
        cadastrarUsuario();
    }
    
    usuario.nome = nome;
}

// Sorteia um n√∫mero 
// Par√¢metros: min (int) = valor m√≠nimo
//             max (int) = valor m√°ximo
//             decimal (int) = valor decimal
function randomico(min, max, decimal){
    if (decimal) {
        return ((Math.random() * (max - min + 1)) + min).toFixed(2);
    }

    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function selecaoDeOpcoes(){
    
    var op = lerEntrada("", false, false);

    console.clear();
    switch (op)
    {
        // Gerenciar carteira
        case "1" :
            {
                gerenciarCarteira();
            }
            break;
        
        // Negociar A√ß√µes
        case "2" :
            {
                negociarAcao();
            }

        // In√≠cio
        default : 
            inicio();
    }
}

function gerenciarCarteira(){

    exibirMensagem(MENSAGENS.gerenciamentoCarteira, true, true);
    exibirMensagem(`Ol√°, ${usuario.nome}!`, true, false);

    // Apresentar Carteira
    listarAcoes(usuario.acoes);

    var op = lerEntrada(`${usuario.acoes.length + 1} - ${OPCOESMSG.retornarInicio}`, true, false);

    switch (op) {

        // Retornar ao in√≠cio
        case (usuario.acoes.length + 1).toString():
            inicio();
            break;
    
        default:
            gerenciarCarteira();
            break;
    }
}

function listarAcoes(lista){

    var pos = lista.findIndex(acao => acao.qtd === 0);

    // Deletar quantidades 0
    if (pos != -1) {
        lista.splice(pos, 1);
    }

    for (let i = 0; i < lista.length; i++) {
        const element = lista[i];

        console.log(`${i + 1} - C√≥digo: ${element.cod} | Pre√ßo: ${element.cotacao} | Quantidade dispon√≠vel: ${element.qtd}`);        
    }

    console.log("\n");
}

function listarMinhasAcoes(lista){

    var pos = lista.findIndex(acao => acao.qtd === 0);

    // Deletar quantidades 0
    if (pos != -1) {
        lista.splice(pos, 1);
    }

    for (let index = 0; index < lista.length; index++) {
        const element = lista[index];
        
        console.log(`${index + 1} - C√≥digo: ${element.cod} | Pre√ßo: ${element.cotacao} | Quantidade dispon√≠vel: ${element.qtd}`);
    }

    console.log("\n");
}

function negociarAcao(){
    
    exibirMensagem(MENSAGENS.neociacaoAcao, true, true);

    exibirMensagem(MENSAGENS.escolher, true, false);

    exibirMensagem(`1 - ${OPCOESMSG.comprar}`, false, false);
    exibirMensagem(`2 - ${OPCOESMSG.vender}`, false, false);
    //exibirMensagem(`3 - ${opcoesMsg.retornarInicio}`, false, false);


    var op = lerEntrada(`3 - ${OPCOESMSG.retornarInicio}`, true, false);

    switch (op) {

        // Comprar A√ß√£o
        case '1':
            comprarAcao();
            break;
        
        // Vender A√ß√£o
        case '2':
            venderAcao();
            break;
        
        // Retornar ao in√≠cio
        case '3':
            inicio();
            break;
    
        default:
            negociarAcao();
            break;
    }
}

function efetivaCompra(index, qtd){

    const pos = usuario.acoes.findIndex( acao => acao.cod === acoesDisponiveis[index - 1].cod );

    if (qtd > acoesDisponiveis[index - 1].qtd) {
        console.clear();
        exibirMensagem(MENSAGENS.limiteSuperior, true, true);
        lerEntrada(OPCOESMSG.qualquerTecla, true, false);
        comprarAcao();
    }

    if (pos != -1){
        acoesDisponiveis[index - 1].qtd -= qtd;
        usuario.acoes[pos].qtd += qtd;
    }
    else
    {
        usuario.acoes.push(new Acao(acoesDisponiveis[index - 1].cod, qtd, acoesDisponiveis[index - 1].cotacao))

        acoesDisponiveis[index - 1].qtd -= qtd;
        //usuario.acoes[usuario.acoes.length - 1].qtd = qtd;
    }

    console.clear();
    exibirMensagem(MENSAGENS.comprarEfetivada, true, false);
    
    exibirMensagem("Carteira de A√ß√µes: ", true, false);
    listarAcoes(usuario.acoes);

    lerEntrada(OPCOESMSG.qualquerTecla, true, false);
    comprarAcao();
}

function comprarAcao(){
    
    console.clear();
    exibirMensagem(MENSAGENS.comprarAcao, true, true);
    exibirMensagem(MENSAGENS.escolher, true, false);

    // Listar a√ß√µes dispon√≠veis
    listarAcoes(acoesDisponiveis);
    
    var op = lerEntrada(`${acoesDisponiveis.length + 1} - ${OPCOESMSG.retornarInicio}`, true, false);

    if (isNaN(op) || op == "" || (parseInt(op) <= 0) || (parseInt(op) >= acoesDisponiveis.length + 2) ) {
        comprarAcao();
    }

    if (parseInt(op) == acoesDisponiveis.length + 1) {
        inicio();
    }

    console.log('\nInforme a quantiade desejada!');
    var qtd = parseInt(lerEntrada("", false, false))

    if (isNaN(qtd)) {
        console.log("Quantidade Inv√°lida!");
        lerEntrada("Pressione qualquer tecla para voltar!", true, false);
        comprarAcao();
    }

    // Comprar
    efetivaCompra(op, qtd);
}

function venderAcao(){

    console.clear();
    exibirMensagem(MENSAGENS.venderAcao, true, true);
    exibirMensagem(MENSAGENS.escolher, true, false);

    // Listar a√ß√µes dispon√≠veis
    listarAcoes(usuario.acoes);

    var op = lerEntrada(`${usuario.acoes.length + 1} - ${OPCOESMSG.retornarInicio}`, true, false);

    if (isNaN(op) || op == "" || (parseInt(op) <= 0) || (parseInt(op) >= usuario.acoes.length + 2) ) {
        venderAcao();
    }

    if (parseInt(op) == usuario.acoes.length + 1) {
        inicio();
    }

    console.log('\nInforme a quantiade desejada!');
    var qtd = parseInt(lerEntrada("", false, false))

    if (isNaN(qtd)) {
        console.log("Quantidade Inv√°lida!");
        lerEntrada("Pressione qualquer tecla para voltar!", true, false);
        venderAcao();
    }

    // Vender
    efetivaVenda(op, qtd);
}

function efetivaVenda(index, qtd){

    // Procura acao pelo c√≥digo
    const pos = acoesDisponiveis.findIndex( acao => acao.cod === acoesDisponiveis[index - 1].cod );

    if (qtd > usuario.acoes[index - 1].qtd) {
        console.clear();
        exibirMensagem(MENSAGENS.limiteSuperior, true, true);
        lerEntrada("Pressione qualquer tecla para retornar!", true, false);
        venderAcao();
    }

    if (pos != -1){
        usuario.acoes[index - 1].qtd -= qtd;
        console.log(acoesDisponiveis[pos].qtd);
        acoesDisponiveis[pos].qtd += qtd;
        console.log(acoesDisponiveis[pos].qtd);
        PROMPT();
    }
    else
    {
        acoesDisponiveis.push(new Acao(usuario.acoes[index - 1].cod, qtd, usuario.acoes[index - 1].cotacao))
        usuario.acoes[index - 1].qtd -= qtd;
        console.log(acoesDisponiveis[acoesDisponiveis.length-1]);
        PROMPT();
        //acoesDisponiveis[acoesDisponiveis.length-1].qtd = qtd;
    }

    console.clear();
    exibirMensagem(MENSAGENS.vendaEfetivada, true, false);
    
    exibirMensagem("Carteira de A√ß√µes: ", true, false);
    listarAcoes(usuario.acoes);

    lerEntrada(OPCOESMSG.qualquerTecla, true, false);
    venderAcao();
}

function inicio(){

    console.clear();

    exibirMensagem(MENSAGENS.boasVindas, true);

    // Novo usu√°rio
    if (usuario.nome == undefined) 
    {
        cadastrarUsuario();
        inicio();
    }
    // 
    else
    {
        exibirMensagem(`Ol√°, ${usuario.nome}!`, true);

        exibirMensagem(MENSAGENS.escolher, true, false);
        exibirMensagem(`1 - ${OPCOESMSG.carteira}`, false, false);
        exibirMensagem(`2 - ${OPCOESMSG.negociacao}`, false, false);

        selecaoDeOpcoes();
    }
}

var usuario = new Usuario();

inicio();